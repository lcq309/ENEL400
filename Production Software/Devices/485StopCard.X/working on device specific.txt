The device specific main.c is responsible for providing the main running task, as well as the initialization task for devices that need to be initialized with the scheduler running.

network initialization will involve a few steps:
1. on boot, all devices perform their internal initialization and any diagnostics that they can
2. after a short delay to allow all devices time to initialize, the coordinator sends out pings to all devices on the wired bus sequentially.
3. the devices respond with the generic ping response and unlock any tasks waiting for initialization.
4. after constructing the round robin table, the coordinator begins sending out sequential round robin pings to all devices that responded.

the initialization task should do something to show that the device is on, like flashing an indicator.

the stop button task should be capable of:
- forming a table of other stop buttons on the same network
- forming a table of controllers and lights on the same network

A stop button receiving a message from another controller will:
-respond with it's current button state.

A stop button receiving a message from a light or controller will:
- mark the light or controller as confirmed, of this is the confirmation response.
- blink the stop indicator if a light or controller fails to confirm

once all lights are confirmed:
for red, the red light will turn solid.
for yellow or off, the red light will turn off.
the red light will flash when attempting to change state.

The stop button only needs to check the state of other stop buttons if it is trying to release the network from red, otherwise they do not matter.

PC1 is indicator 1, which is the red light indicator.

PD6 and 5 are buttons 1 and 2, I'm not sure which is which yet so it will need a bit of testing.

This should be able to use an interrupt for the off button, but the stop button will be a bit strange.
The DSIOin task needs to check the state of the stop button often, so it knows when it has been released.

The stop button is special in that it doesn't need to confirm all devices as red to release, it only needs to confirm the state of other stop buttons.
It releases to yellow, which handles lockouts the same way that a normal controller might.

when switching to red, or out of red. The red light will flash. When all lights have confirmed the yellow state change and released lockout it will turn off.

off is a bit special, it doesn't set a lockout at all. It will only confirm lights have turned off (and override any existing lockout aside from red).

when the release signal is sent, the lockout state will transition from 'R' to 'r', signifying the lockout can be released if all buttons are in agreement.
('R' indicates button down, 'r' indicates button up). any stop button that has been released will be subordinate to those who have not.

In order to prevent messaging confusion, the stop button will use 'x' to acknowledge a red colour change when it's own button hasn't been pressed.

the query is the same as the colour change command, and only when all stop buttons are in agreement will the stop condition be allowed to release.
stop condition is released by transitioning to a yellow lockout, which then progresses much the same as it might for a normal controller.

when a stop button is trying to release (lockout 'r' and requester 1), it will check the state of the other stop buttons once per messaging cycle.
when all stop buttons are in agreement (all status 'r'), any requester one (initiator) stop buttons will begin transitioning the network to a yellow lockout.
the lights can be turned off anytime so long as the network has transitioned to a yellow lockout.
The yellow lockout will release (stop buttons -> controllers -> lights) once everything has confirmed.
at this point, controllers will be able to act normally.

only the yellow lockout is released automatically, off doesn't have a lockout (only confirms all lights, and stops).
The red lockout transitions to yellow when all stop buttons are in agreement.
yellow releases to clear once all lights and controllers have confirmed.

I should probably add some code to reset the status of everything when a colour change is requested, to avoid a situation where an initiating device has lost track of the network and thinks everything is a colour that it isn't. (on the first transmission from a requester 1 device, set the status of everything to 0).
